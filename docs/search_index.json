[
["index.html", "Sozialwissenschaftliche Datenanalyse mit R Einführung", " Sozialwissenschaftliche Datenanalyse mit R Kenneth Horvath &amp; Guy Schwegler HS 2020 Einführung Das Seminar “Sozialwissenschaftliche Datenanalyse mit R” bietet eine systematische Einführung in das Statistikpaket R. R ist eine Open Source Software, die sich unter anderem durch Flexibilität und vielfältige Möglichkeiten der grafischen und numerischen Datenanalyse auszeichnet. Das Seminar führt in inhaltlicher Abstimmung mit der Vorlesung „Grundlagen der multivariaten Statistik“ in Aufbau und Funktionsweise des Programms sowie in die Umsetzung wichtiger statistischer Verfahren (etwa lineare Regression und logistische Regression) ein. Anhand dieser Verfahren werden unter anderem Techniken des effizienten Datenmanagements, Möglichkeiten, eigenständig kleine Funktionen zu programmieren, sowie Formen der grafischen Datenanalyse und Ergebnisdarstellung besprochen. Das vorliegende Dokument ist ein sogennantes Bookdown (Xie (2020), siehe auch hier) und dient der Ergebnissicherung im Seminarverlauf. Das heisst dass die im Seminar besprochene Themen hiernochmals schriftlich festgehalten, diskutiert und allenfalls Literatur ergänzt werden (siehe für allgemeine Literatur etwa Diaz-Bone (2019), Kabacoff (2015) oder Manderscheid (2017)). Das Bookdown wird laufend aktualisiert. Ebenfalls werden in diesem Bookdown die Lösungen für die im Seminar gestellten Aufgaben (Falllösungen) präsentiert. References "],
["einheit-vom-17-09.html", "1 Einheit vom 17.09 1.1 Sozialwissenschaftliche Datenanalyse 1.2 R als Programm 1.3 Ziel des Kurses 1.4 Installation R, Ausblick", " 1 Einheit vom 17.09 1.1 Sozialwissenschaftliche Datenanalyse Das Seminar “sozialwissenschaftliche Datenanalyse mit R” versucht eine Realität des statistischen Arbeitens zu vermitteln und ergänzt so Vorlesung “Grundlagen der multivariaten Statistik” gleich in zweierlei Hinsicht: Erstens wird eine Auswahl der gelernten statistischen Verfahren konkret angewendet (und so auch nochmals repetiert). Zweitens zeigt sich neben den eigentlichen Verfahren eine weiterer, impliziter Teil der Statistik: ein Umgang mit Daten, deren Aufbereitung und Verarbeitung sowie all die damit einhergehenden Herausforderungen. Hinter dem Seminar steht eine bestimmte Vorstellung der sozialwissenschaftlichen Datenanalyse, die folgende Teile enthält (Wickham and Grolemund 2016): Figure 1.1: Modell Datenanalyse Als erster Schritt müssen die Daten eingelesen bzw. importiert werden. Die importierten Daten gilt es dann aufzubereiten und aufzuräumen. Das bedeutet, dass sie in einer einer konsistenten Form gespeichert sind (z.Bsp. dass jede Zeile einer Person und jede Spalte einer Variable entspricht). Dieser zweite Schritt ist im Rahmen von Sekundärdaten (wie auch wir sei verwenden werden) oft bereits erfolgt. Ein weiterer Schritt ist es dann, die Daten zu transformieren. Das heisst, die Fälle und ihre Ausprägungen auf ein bestimmes Interesse eingegrenzt (z.Bsp. auf alle Personen die über ein bestimmtes Einkommen verfügen), neue Variablen werden erstellt (die Funktionen bestehender Variablen sind, etwa Einkommensklassen), und eine Reihe von zusammenfassenden Statistiken werden berechnet (verschiedene univariate Kennwerte). Das Aufbereiten und Transformieren ist ein grosser Teil der statistischen Analyse (es ist ein Kampf mit den Daten, Wickham and Grolemund 2016, Kap.1.1). Ziel dieser Arbeit ist es, die Daten in eine passende Form zu bringen, um optimal mit ihnen arbeiten zu können. Wenn die Daten (voerst) in einer optimalen Form vorliegen gibt es zwei Hauptmotoren der Wissensgenerierung (Wickham and Grolemund 2016, Kap.1.1): Visualisierung und Modellierung. Mit Visualisierungen lässt sich schnell eine Übersicht gewinnen (z.Bsp. könnte es überhaupt einen Zusammenhang zwischen zwei Variablen geben?). Modellierungen wiederum ergänzen diese ersten Einsichten, in dem sie präzise Antworten auf Fragen geben (wie gross ist der Zusammenhang genau?). Das Transformieren, Visualisieren und Modellieren der Daten ist dabei keineswegs ein linearer Prozess, sondern es ergeben sich in ihm immer wieder Wechselwirkungen, Rückbezüge und dadurch neue Wege, um an die Daten heranzutreten. Der letzte Schritt der Datenanalyse ist die Kommunikation. Es gilt also sowohl das Vorgehen (zumindest teilweise) als inbesondere die Ergebnisse der Analyse anderen mitzuteilen. Diese Prozesse der Datenanalyse finden alle in einem bestimmen Rahmen statt (vgl. auch Sauer 2019, 3). Dies ist auf der einen Seite die Idees des Programmierens im Vorgehen selber (vgl. Wickham and Grolemund 2016, Kap.1.1). Auf der anderen Seite bilden aber die Sozialwissenschaften selber auch einen Rahmen um dieses Vorgehen, anhand dessen etwa Datenstrukturen (z.Bsp. dass eine Person ein Fall und damit eine Zeile ist) oder angemessene Ziele der Analyse (ab wann ist ein Zusammenhang etwa “gross”?) vorgegeben werden. 1.2 R als Programm muss noch überarbeitet werden 1. State of The Art Anfang der 90er Jahre entwickelt an der Universität Auckland in Neuseeland (Gegensatz SPSS, SPSS als Relikt), immer das aktuellste, mehr Möglichkeiten, insbesondere grafische Analysemethoden, aber auch QDA ist möglich, tolle Grafiken/Tabellen, (…) Entwicklung im Austausch Schnell (Big Data), Flexibel (immer nur das gebraucht, was gebraucht werden muss, verschiedene GUI kostenlos negativ Punkt: keine ‘fertiges’ Programm 2. Open Sourse, riesige Anzahl Package (fast 12’000) 3. GUIs GUIs zeigen -&gt; R Konsole, R Commander, R Studio 1.3 Ziel des Kurses Das Seminar verfolgt zwei miteinander verzahnte, übergeordnete Lernziele. Einerseits sollen die Studierenden sich Grundkenntnisse der statistischen Datenanalyse mit R aneignen. Andererseits werden ausgewählte Inhalte der Vorlesung praktisch angewandt und damit auch veranschaulicht.1 Konkret sollen die Studierenden am Ende des Semesters… …einen ersten Einblick in Abläufe und Anforderungen softwaregestützter Datenanalyse haben, …typische Herausforderungen statistischen Arbeitens eigenständig bewältigen können, …die allgemeine Funktionsweise und die Struktur von R verstehen, …die Umsetzung ausgewählter multivariater Verfahren in R beherrschen, …dabei auch grafische Verfahren als zentrale Bausteine aktueller Datenanalyse einsetzen können …sowie die Grundlage dafür erworben haben, flexibel eigene Analysestrategien in R um-zusetzen. 1.4 Installation R, Ausblick muss noch überarbeitet werdenWer hat alles schon installierte? Installieren, andere wieder mal reinkommen, auch Kapitel 1+2+3 aus Manderscheids Buch Ziel für nächstes Mal: Installiert und auch mit dem ESS vertraut gemacht References "],
["einheit-vom-24-09.html", "2 Einheit vom 24.09 2.1 Lernziele", " 2 Einheit vom 24.09 Sozialwissenschaftliche Datenanalyse mit R – Wochenplan 2 2.1 Lernziele In der zweiten Seminarwoche geht es darum die Grundlagen von R und R-Studio zu repetieren und zu erweitern.2 Für den weiteren Verlauf des Seminars gilt es R als Sprache aufzufassen – sowohl als Programmiersprache als auch als Sprache im eigentlichen Sinn. Wir wollen also ein komplexes System zur Kommunikation kennenlernen. Hierbei gibt Zeichen mit Bedeutungen (ähnliche wie Nomen, Verben,…) und auch Regeln zur Verknüpfung dieser Zeichen (ähnlich wie eine Grammatik). Diese Grundlagen gilt es alle erstmal kennezulernen und zu verstehen. Am Anfang wird vieles schwer fallen bevor man dann im weiteren Verlauf immer sicherer wird. Der zentrale Punkt in dieser Vorstellung von R als Sprache ist dabei folgender: Wir lernen eine Sprache dadurch, dass wir sie immer wieder anwenden. In dieser beständigen Erweiterung der Grundlage und damit auch im Erlernen der R-Sprache geht es um die Vermittlung zwischen Trivialität und Komplexität: Es gilt die kleinen Schritte ernstzunehmen, sonst werden die grossen Schritte sehr schnell mühsam. R als Software und als Programmiersprache hat eine steile Lernkurve und viele Probleme werden zu Beginn auftauchen. Im Umgang mit den Problemen soll allerdings auch eine eigene Arbeitsweise mit dem Programm erlernt werden (Fehlermeldungen lesen, Lösungsstrategien im Codieren erlernen, sich selber Hilfe suchen, …). Für die zweite Seminarwoche lassen sich folgende Seminarziele festhalten: Sie können die verschiedenen Funktionsweisen der vier Fenster in R-Studio erläutern Sie haben R-Markdown als erweitertes Skript und Arbeitsinstrument kennengelernt. Sie können ein Arbeitsverzeichnis definieren und verwenden. Sie verstehen das erste Grundelemente der Programmiersprache von R: Funktionen &amp; Objekte Sie wissen, wie Sie Sich Hilfe zu Funktionen holen Sie wissen, was Argumente einer Funktion sind Sie verstehen das zweite Grundelemente der Programmiersprache von R: Objekte Sie haben ein das Zusammenspiel von Funktionen und Objekte kennengelernt. Sie kennen bereits drei verschiedenen Arten von Objekten Falls Sie noch Probleme bei der Installation von R bzw. R-Studio oder sonstige Schwierigkeiten können Sie diese weiterhin melden.↩ "],
["aufgaben.html", "3 Aufgaben 3.1 Repetition 3.2 RMarkdown 3.3 Funktionen und Objekte 3.4 Arten von Objekten 3.5 Arbeitsauftrag", " 3 Aufgaben Beschreiben Sie kurz die Funktionen der vier Fenster von R (in einem Texteditor Ihrer Wahl). Führen sowohl in der Konsole als auch im Skripte einge Rechnungen durch und speichern Sie im Skript die Resultate der als Kommentare. Die Rechnung könnten etwa folgende sein: folgende: 1+1 5 + 3 - 4 (5 + 3 - 4) / 5 Sie möchten nun ihre letzte Rechnung als Objekte ‘x’ abspeichern. Wie könnten Sie das in der Konsole tun, ohen dass Sie nochmals den Kode der Rechnung (“(5 + 3 - 4) / 5”) selber schreiben müssten? 3.1 Repetition Vier Fenster/Bereiche in R Studio: Console: Konsole=R, ohne grafischen Filter. Befehle werden über die Konsole gespielt, in der Konsole läuft R. R-Skript: Befehle in einem Text schreiben. Das Skript Fenster ist einfach eine Text Datei. Skript als “Arbeitsgedächtnis” – alle Befehle können wieder aufgerufen werden. Und man kann kommentieren mittels eines #. –&gt; Taschenrechner in Konsole und Taschenrechner in Skript Hinweis auf das Prompt: Das &gt; heisst, ich bin ready, frag mich was! Im Skript oder in der Konsole: 1+1 5 + 3 - 4 (5 + 3 - 4) / 5 x &lt;- (5 + 3 - 4) / 5 #hier der Hinweis auf die Pfeiltaste Mit diesem Zusatz « &lt;- » wird x als Objekt definiert (siehe unten), in der Environment abgespeichert und kann verwendet werden. Environment: Da werden alle Formen von Daten abgespeichert, die Grundlagen für die Befehle sind. Ebenfalls findet man dort eine History seiner Befehle. x ## [1] 0.8 Was fehlt jetzt noch? Ergebnis! Grafiken, Hilfe, etc. I Fenster unten rechts teilt uns R-Studio etwas mit. 3.2 RMarkdown Man kann entweder mit der Konsole, mit dem Skript oder als dritte Möglichkeit auch mit dem Markdown arbeiten. Eine neue Markdown Datei kann via «File&gt;New File&gt;R Markdown» oder dem Button direkt unter dem «File» (oder «Datei») Button geöffnet werden. Markdown ist unterteil in einfachen Fliesstext (weisser Hintergrund) oder R Chunk, d.h. heisst Code Stücke (Befehle) für R. Ein R Chunk kann entweder über den «Insert»-Button im Markdown-Fenster eingefügt werden, oder aber über die Tastenkombination «Ctrl + Alt + i» (bzw. «Cmd + Option + I» bei Mac). Vorteil am Arbeiten mit Markdown ist * 1 eine bessere Übersicht/Struktur und Eingabe, * 2. dass via dem «Knit»-Befehle ein Dokument (wie dieses hier) erstellt werden kann und * 3. Ergebnisse bei jeden ‘knitten’ neu geladen werden (so sind die ausgegebenen Dokument immer aktuell). Für die verschiedenen Formatierungsmöglichkeiten siehe R-Markdown References im OLAT-Ordner ‘Literatur/R-Cheatsheets’. 3.3 Funktionen und Objekte R als Sprache besteht aus zwei Elementen * 1. Funktionen * 2. Objekte 3.3.1 Funktionen Funktionen sind etwas, das R macht; wir sagen R, es soll etwas machen. Sie legen fest, was passieren soll und sind immer über die beiden Klammern definiert. sqrt(x) ## [1] 0.8944272 Funktionen führen etwas aus mit einem Objekt, und spezifizieren wie etwas gemacht wird über Argumente. Auch wenn wir uns Hilfe holen möchten, können wir das über eine Hilfe Funktion tun: help(&quot;sqrt&quot;) #hier mit Anführungs- und Schlusszeichen #oder eine andere Variante: ?sqrt #ohne Anführungs- und Schlusszeichen ?mean help(&quot;help&quot;) ?help Diese Funktionen sind in den verschiedensten Paketen organisiert. Auch RStudio und RMarkdown sind eigentlich nichts anderes als Pakate. Pakete werden installiert mit der Funktion install.packages() und dann geladen, wenn nötig, mittels library(). Pakete sind daher wie Bücher, die man sich besorgt hat und die ordentlich in einem Regal sind, bis man sie zum verwenden möchte. Mit folgender Funktion können wir etwa betrachten, welche Pakate installiert worden sind: installed.packages() 3.3.2 Objekte R ist eine Objekt-basierte Programmiersprache. Das heisst wir arbeiten immer mit Objekten, und alles kann eigentlich ein Objekte werden. Wenn wir nach Hilfe suchen mittels: help(&quot;help&quot;) Dann wird die Funktion “help” zum Objekte der help-Funktion. …oder wir nehmen einfach unser Objekt x von oben und machen nochmals was damit: x + 3 ## [1] 3.8 x * x ## [1] 0.64 Je nach Zeit: Definition des Arbeitsverzeichnis …entweder mittels: #setwd() …das ist aber unglaublich mühsam… …und funktioniert nur beschränkt im Markdown-File selber. Weiter als Hinweis zu Blackslash und Slash: Kopiert man den Pfad des Ordners via Windows erscheinen Backslashes “\" anstatt (wie von R verlangt) Slashes”/\". Dies kann manchmal zu Problemem führen. Darum sollten Sie dies als absolute Ausnahme via der Menüsteuerung machen: Session&gt;Set Working Directory&gt;Choose Directory Wählen Sie dann eine Ordner aus… und kopieren Sie die Code Zeile aus der Konsole als Hinweis in ihre Markdown Date hinein. Oder geben Sie den Befehl setwd(“PfadzuihremAArbeitsordner”) in der Konsole ein und kopieren Sie diesen. Hier habe ich die Definition des Arbeitsordners als Hinweis drin setwd(&quot;C:/Users/SchweglG/R_Daten/HS19/E2&quot;) Und dann als kleiner Versuch kann man sich mal die Liste seiner Pakete als CSV-Datei ausgeben lassen. CSV (Comma Seperated Values) ist ein sehr kleines und sehr flexibles Datenformat, dass – wie es der Name bereits sagt – einfach die einzelne Werte mittels Kommas und Zeilen in Datentabellen unterteilt. pakete_liste &lt;- installed.packages() ls() ## [1] &quot;pakete_liste&quot; &quot;x&quot; write.table(pakete_liste, file=&quot;Paketliste_neu.csv&quot;, sep=&quot;,&quot;) #CSV Comma-Seperated-Value Was haben wir hier gemacht? Wir machen unsere Lise mit Paketen als ein Objekt abgespeichert (das Objekt ‘pakete_liset’) und dieses haben wir uns auf CSV-Datei abspeichern lassen. Und da wir keine weiteren Spezifikationen angegeben haben, speichert R die Daten in unser Arbeitsverzeichnis ab. 3.4 Arten von Objekten R kennt nun verschiedenste Arten von Objekten, wir bleiben heute mal bei den Zahlen. Auch hier gibt es * einzelne Zahlen * eine Reihe von Zahlen (Vektoren) * Matrizen von Zahlen (Matrix) sowie * Dataframes («Datensätze», werden wir später noch kennenlernen) * Listen &amp; Arrays (lassen wir hier mal weg) 3.4.1 einzelne Zahlen x ## [1] 0.8 rm(x) ls() ## [1] &quot;pakete_liste&quot; Vorschlag: Wir lassen uns immer den gesamten Working-Space – das heisst all unsere Objekte in der Environment – automatisch löschen, nachdem wir R beenden. Das hat den Vorteil, das ein Codes gründlich sein muss und nicht etwaige Objekte noch irgendwo “hängen” bleiben. Tools&gt;Global Options&gt;General&gt;Workspace&gt;Save Workspace to .Rdate on exit: Never Zurück zu unserem einzelnen Zahlen x &lt;- 1 is.numeric(x) #Hinweis auf Tabulatortaste ## [1] TRUE v &lt;- 2 w &lt;- 3 y &lt;- 2 z &lt;- 1 v + w + x + y + z ## [1] 9 x, y, z sind jetzt alles einzelne Zahlen. Das ist natürlich nicht sonderlich interessant, dann wir operieren ja meisten mittels mehreren Zahlen… 3.4.2 Vektoren Ein Vektor in R bezeichnet eine Menge von Elementen und entspricht nicht dem mathematischen Konzept eines Vektors. Vektoren können sowohl eine Menge an Zahlen als auch an Buchstaben bzw. Zeichen enthalten (wir bleiben vorerst bei Zahlen). v1 &lt;- c(176,180,192,156,168) is.vector(v1) ## [1] TRUE Das ähnelt nun schon fast einer Variable - z.Bsp. Körpergrösse mit 7 Fällen. Bennen wir doch daher unseren neuen vektor, der eine Variable sein könnte, auch dementsprechend: koerp_g &lt;- v1 koerp_g ## [1] 176 180 192 156 168 Wir können natürlich auch einzeln Objekte zu einem neuen Vektorhinzufügen: gndr &lt;- c(v,w,x,y,z) gndr ## [1] 2 3 1 2 1 is.vector(gndr) ## [1] TRUE 3.4.3 Matrizen rbind(koerp_g,gndr) ## [,1] [,2] [,3] [,4] [,5] ## koerp_g 176 180 192 156 168 ## gndr 2 3 1 2 1 data &lt;- rbind(koerp_g,gndr) #rbind ist eine Funktion, wo wir die Reihen (bzw. Zeilen) aneinanderfügen is.matrix(data) ## [1] TRUE Eine Matrix bzw. Matrize enthalten Zeilen und Spalten. Dabei können sie nur Daten eines Typs, also entweder numerische oder Textdaten, kombinieren…. Trotzdem haben wir so uns einen ersten kleinen Datensatz erstellt, indem (z.Bsp.) Körpergrösse und Geschlecht enthalten ist. 3.5 Arbeitsauftrag Berechnen Sie für den folgenden Vektor in R Mittelwert und Standardabweichung, ohne auf die in R eingebauten Funktionen mean() [berechnet das arithmetische Mittel eines Vektors] und sd() [berechnet die Standardabweichung eines Vektors] zurückzugreifen – also quasi ‘von Hand’. Vektor: (1, 3, 7, 9, 22, 2, 8, 14, 20, 3, 7, 9, 11, 13) Vergleichen Sie Ihr Ergebnis mit jenem der in R eingebauten Funktionen mean() und sd(). Falls es Abweichungen zwischen Ihrer Lösung und derjenigen von R gibt, woran könnte das liegen? Halten Sie Ihren R-Code und Ihre Erläuterungen, Fragen, Probleme etc. in einem R-Markdown-Dokument fest. ‘Knitten’ Sie dieses zu einem PDF und laden Sie die Datei via OLAT hoch. Sollten Sie Probleme mit dem Markdown haben können Sie im R-Skript arbeiten, ihre geschriebenen Zeilen rauskopieren und ggfs. in Word (oder ähnlichem) ergänzen. "],
["methods.html", "4 Methods", " 4 Methods We describe our methods in this chapter. "],
["applications.html", "5 Applications 5.1 Example one 5.2 Example two", " 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "6 Final Words", " 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
