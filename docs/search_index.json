[
["index.html", "Sozialwissenschaftliche Datenanalyse mit R Einführung", " Sozialwissenschaftliche Datenanalyse mit R Kenneth Horvath &amp; Guy Schwegler HS 2020 Einführung Das Seminar “Sozialwissenschaftliche Datenanalyse mit R” bietet eine systematische Einführung in das Statistikpaket R. R ist eine Open Source Software, die sich unter anderem durch Flexibilität und vielfältige Möglichkeiten der grafischen und numerischen Datenanalyse auszeichnet. Das Seminar führt in inhaltlicher Abstimmung mit der Vorlesung „Grundlagen der multivariaten Statistik“ in Aufbau und Funktionsweise des Programms sowie in die Umsetzung wichtiger statistischer Verfahren (etwa lineare Regression und logistische Regression) ein. Anhand dieser Verfahren werden unter anderem Techniken des effizienten Datenmanagements, Möglichkeiten, eigenständig kleine Funktionen zu programmieren, sowie Formen der grafischen Datenanalyse und Ergebnisdarstellung besprochen. Das vorliegende Dokument ist ein sogennantes Bookdown (Xie (2020), siehe auch hier) und dient der Ergebnissicherung im Seminarverlauf. Das heisst dass die im Seminar besprochene Themen hiernochmals schriftlich festgehalten, diskutiert und allenfalls Literatur ergänzt werden (siehe für allgemeine Literatur etwa Diaz-Bone (2019), Kabacoff (2015) oder Manderscheid (2017)). Das Bookdown wird laufend aktualisiert. Ebenfalls werden in diesem Bookdown die Lösungen für die im Seminar gestellten Aufgaben (Falllösungen) präsentiert. References "],
["wocheplan-01.html", "1 Wocheplan 01 1.1 Sozialwissenschaftliche Datenanalyse 1.2 Ziel des Kurses 1.3 R als Programm &amp; RStudio 1.4 Lernziele der ersten Woche 1.5 Aufgaben der ersten Woche", " 1 Wocheplan 01 …zur Einheit vom 17.09.2020, Einführung 1.1 Sozialwissenschaftliche Datenanalyse Das Seminar “sozialwissenschaftliche Datenanalyse mit R” versucht eine Realität des statistischen Arbeitens zu vermitteln und ergänzt so Vorlesung “Grundlagen der multivariaten Statistik” gleich in zweierlei Hinsicht: Erstens wird eine Auswahl der gelernten statistischen Verfahren konkret angewendet (und so auch nochmals repetiert). Zweitens zeigt sich neben den eigentlichen Verfahren ein weiterer, impliziter Teil der Statistik: ein Umgang mit Daten, deren Aufbereitung und Verarbeitung sowie all die damit einhergehenden Herausforderungen. Hinter dem Seminar steht eine bestimmte Vorstellung der sozialwissenschaftlichen Datenanalyse, die folgende Teile enthält (Wickham and Grolemund 2016): Figure 1.1: Modell Datenanalyse Als erster Schritt müssen die Daten eingelesen bzw. importiert werden. Die importierten Daten gilt es dann aufzubereiten und aufzuräumen. Das bedeutet, dass sie in einer konsistenten Form gespeichert werden sollen (z.Bsp. dass jede Zeile einer Person und jede Spalte einer Variable entspricht). Dieser zweite Schritt ist im Rahmen von Sekundärdaten (wie auch wir sie verwenden werden) oft bereits erfolgt. Ein weiterer Schritt ist es dann, die Daten zu transformieren. Das heisst, die Fälle und ihre Ausprägungen auf ein bestimmes Interesse eingegrenzt (z.Bsp. auf alle Personen die über ein bestimmtes Einkommen verfügen), neue Variablen werden erstellt (die Funktionen bestehender Variablen sind, etwa Einkommensklassen), und eine Reihe von zusammenfassenden Statistiken werden berechnet (verschiedene univariate Kennwerte). Das Aufbereiten und Transformieren ist ein grosser Teil der statistischen Analyse (es ist ein Kampf mit den Daten, Wickham and Grolemund 2016, Kap.1.1). Ziel dieser Arbeit ist es, die Daten in eine passende Form zu bringen, um optimal mit ihnen arbeiten zu können. Wenn die Daten (voerst) in einer optimalen Form vorliegen gibt es zwei Hauptmotoren der Wissensgenerierung (Wickham and Grolemund 2016, Kap.1.1): Visualisierung und Modellierung. Mit Visualisierungen lässt sich schnell eine Übersicht gewinnen (z.Bsp. könnte es überhaupt einen Zusammenhang zwischen zwei Variablen geben?). Modellierungen wiederum ergänzen diese ersten Einsichten, in dem sie präzise Antworten auf Fragen geben (wie gross ist der Zusammenhang genau?). Das Transformieren, Visualisieren und Modellieren der Daten ist dabei keineswegs ein linearer Prozess, sondern es ergeben sich in ihm immer wieder Wechselwirkungen, Rückbezüge und dadurch neue Wege, um an die Daten heranzutreten. Der letzte Schritt der Datenanalyse ist die Kommunikation. Es gilt also sowohl das Vorgehen (zumindest teilweise) als inbesondere die Ergebnisse der Analyse anderen mitzuteilen. Diese Prozesse der Datenanalyse finden alle in einem bestimmen Rahmen statt (vgl. auch Sauer 2019, 3). Dies ist auf der einen Seite die Idees des Programmierens im Vorgehen selber (vgl. Wickham and Grolemund 2016, Kap.1.1). Auf der anderen Seite bilden aber die Sozialwissenschaften selber auch einen Rahmen um dieses Vorgehen, anhand dessen etwa Datenstrukturen (z.Bsp. dass eine Person ein Fall und damit eine Zeile ist) oder angemessene Ziele der Analyse (ab wann ist ein Zusammenhang etwa “gross”?) vorgegeben werden. 1.2 Ziel des Kurses Das Seminar verfolgt zwei miteinander verzahnte, übergeordnete Lernziele. Einerseits sollen die Studierenden sich Grundkenntnisse der statistischen Datenanalyse mit R aneignen. Andererseits werden ausgewählte Inhalte der Vorlesung praktisch angewandt und damit auch veranschaulicht.1 Konkret sollen die Studierenden am Ende des Semesters… …einen ersten Einblick in Abläufe und Anforderungen softwaregestützter Datenanalyse haben, …typische Herausforderungen statistischen Arbeitens eigenständig bewältigen können, …die allgemeine Funktionsweise und die Struktur von R verstehen, …die Umsetzung ausgewählter multivariater Verfahren in R beherrschen, …dabei auch grafische Verfahren als zentrale Bausteine aktueller Datenanalyse einsetzen können …sowie die Grundlage dafür erworben haben, flexibel eigene Analysestrategien in R um-zusetzen. 1.3 R als Programm &amp; RStudio R als Programmiersprache wurde von Beginn an für die Statistik bzw. für die Statistiklehre entwickelt. Die Anfänge des Programms fanden in den 1990er Jahre an der Universität Auckland in Neuseeland statt, wo R von Ross Ihaka und Robert Gentleman entwickelt wurde (Manderscheid 2017, 1). Der Buchstabe “R” als Name geht sowohl auf eine ältere Grundlage zurück – die Programmiersprache “S” – als auch auf die Vornamen der beiden Entwickler (ebd., vgl. auch Sauer 2019, 13f). Das R-Projekt wurde in der Zusammenareit mit weiteren Wissenschaftler_Innen voran getrieben und bald auch unter der General Public Licence (GNU) veröffentlicht (Manderscheid 2017, 1). R ist daher frei zugänglich, kostenlos und darf von allen verändert werden. Es ist insbesondere auch diese Open Source Idee, die R zu seiner Verbreitung half – und die sicherstellt, dass die neusten Entwicklungen in und mit der Software stattfinden. R als Programm ist in Paketen organisiert und präsentiert sich als “Statistikumgebung” (Manderscheid 2017, 1). Ausgehend von der Basisversion bzw. des Basispaketes kann R beliebig erweitert werden. Unter https://cran.r-project.org/ findet sich eine beständig wachsende und umfangreiche Sammlung von Paketen, die sowohl Lösungen für allgemeine Verfahren anbieten (etwa Pakete für die multiple Korrespondenzanalyse, siehe ‘soc.ca’) als auch für spezifische Probleme (etwa für “Atomic Force Microscope Image Analysis” beim Paket ‘AFM’). Diese Pakete können installiert werden und es gilt sie dann jeweils noch zu laden, bevor sie verwendet werden können. Nach dem Beenden des Programms werden die verwendeten Pakete wiederum “versort” und es gilt sie beim nächsten mal wieder zu laden (die Pakete beleiben aber installiert). Letzterer Vorgang stellt sicher, dass R “schlank” bleibt, d.h. nur immer die benötigen Dinge auch ausgeführt werden. install.packages(&quot;soc.ca&quot;) #...installiert das Paket library(soc.ca) #...lädt das Paket Neben dieser Open Source Idee und der daraus folgenden, beständigen Aktualisierung und Erweiterungen des Programms zeichnet R sich weiter durch dessen Stärke im Bereich der Visualisierung aus. Es bieten sich unbegrenzte Möglichkeiten für Grafiken und Diagramme, sowohl bereits in der Basisversion als insbesondere auch mit spezifischen Paketen (siehe Chang et al. 2020). Neben der Basisversion von R und R als eigentlicher Programmiersprache gibt es grafische Benutzeroberflächen (GUIs), um mit der Programmiersprache umzugehen. Im Zentrum unseres Seminars steht RStudio, die am weitesten verbreitete grafische Benutzeroberfläche von R. Diese Oberfläche biete einige praktische Zusatzfunktionen und erleichtert so das Arbeiten mit R durch Autovervollständigkeitsfunktionen, automatische Einrückungen, Syntaxhervorhebung, integrierte Hilfsfunktion, Informationen zu Objekten im Workspace, menügestützten Oberflächen und Daten-Viewer (Manderscheid 2017, 18). Die eigentliche Arbeit verrichtet aber weiterhin R selber, und R wird automatisch gestartet wird, wenn Sie RStudio starten (Sauer 2019, 21). Man kann diese Arbeitsteilung mit einem Auto vergleichen: R ist der Motor des Autos, während RStudio das Amaturenbrett ist, vor dem Sie sitzen und das Auto lenken. 1.4 Lernziele der ersten Woche Die erste Seminarwoche dient dazu, die technischen Voraussetzungen für die gemeinsame Arbeit im Seminar zu prüfen und mit der geplanten Arbeitsweise vertraut zu werden. Das Seminar ist insbesondere in den online durchgeführten Teilen als eine Art “flipped classroom” konzipiert. Sie bekommen also von Woche zu Woche konkrete Arbeitsaufträge. Diese sollen Sie eigenständig bewältigen und alle Probleme und Unklarheiten notieren, die sich im Arbeitsprozess ergeben. Die gemeinsamen Sitzungen dienen dann dazu, Lösungswege zu den Aufgaben zu präsentieren, offene Fragen zu klären, Konzepte vertiefend zu erläutern und die nächsten Schritte vorzubereiten. Für jede Woche werden Lernziele und Arbeitsaufträge definiert. Für die erste Seminarwoche lassen sich als Lernziele festhalten: Sie wissen, wie Sie die aktuellen Versionen von R und RStudio auf Ihrem Computer installieren Sie wissen, wie man R-Pakete installiert und in R lädt Sie können eine Funktion aufrufen Sie haben einen soliden ersten Eindruck, wie man mit R kommuniziert und einfache Operationen durchführt Sie haben eine erste Orientierung zu Unterstützungsangeboten, die man online findet (auch wenn diese teilweise noch überfordernd wirken) 1.5 Aufgaben der ersten Woche Installieren Sie die aktuellen Versionen von R und RStudio auf Ihrem Endgerät! Sie sollten sich Notizen, wenn es Probleme gibt – und für das nächste Mal gleich festhalten, wie Sie diese gelöst haben. Da die Details der Installation vom Betriebssystem und den Spezifikationen des Endgeräts abhängen, ist es normal, dass dieser Prozess manchmal erst auf den zweiten Versuch funktioniert. Installieren Sie das Paket “swirl” und laden Sie es. “swirl” ist eine in R implementierte interaktive Einführung in die Grundlagen von R! Rufen Sie die Funktion swirl() auf und spielen Sie ein wenig damit. Rufen Sie sich in Erinnerung, was Sie aus dem letzten Semester noch über die Arbeit mit R wissen! Notieren Sie sich, was Ihnen Sie noch kennen, was Ihnen neu vorkommt, usw. Verwenden Sie ein wenig Zeit darauf, online nach R Tutorials, Foren, etc. zu suchen. Halten Sie die URLs von Seiten und Ressourcen fest, die Ihnen hilfreich und/oder wichtig (aber u.U. noch etwas schwer zu durchschauen) vorkommen! Erstellen Sie aus Ihren Notizen ein PDF Dokument, beschriften Sie dieses mit Fallloesung01_NameVorname.pdf und geben das Dokument via OLAT bis Mittwochmittag ab (23.09.2020, 12:00). References "],
["wochenplan-02.html", "2 Wochenplan 02 2.1 Lernziele der zweiten Woche 2.2 Aufgaben", " 2 Wochenplan 02 …zur Einheit vom 24.09. &amp; 01.10.2020, Grundlagen (Teil 1) 2.1 Lernziele der zweiten Woche In der zweiten Seminarwoche geht es darum, die Grundlagen von R und RStudio zu repetieren und zu erweitern.2 Für den weiteren Verlauf wollen wir R als Sprache auffassen – sowohl als Programmiersprache als auch als Sprache in einem metaphorischen Sinn. Wir wollen also ein komplexes System zur Kommunikation kennenlernen. Wie bei einer anderen Sprache gibt es auch hier Zeichen mit Bedeutungen (ähnliche wie Nomen, Verben, …) und Regeln zur Verknüpfung dieser Zeichen (ähnlich wie eine Grammatik). Diese Grundlagen gilt es alle erstmal kennenzulernen und zu verstehen. Am Anfang wird vieles schwer fallen, mit der Zeit gewinnt man aber Sicherheit. Der zentrale Punkt in dieser Vorstellung von R als Sprache ist dabei folgender: Wir lernen eine Sprache dadurch, dass wir sie immer wieder anwenden, Probleme lösen und vor allem auch Fehler machen. R als Software und als Programmiersprache hat eine steile Lernkurve und zu Beginn werden viele Probleme auftauchen. Im Umgang mit den Problemen soll allerdings auch eine eigene Arbeitsweise mit dem Programm erlernt werden (Fehlermeldungen lesen, Lösungsstrategien im Codieren erlernen, selber Hilfe suchen, …). Für die beständige Erweiterung der Grundlagen und das Erlernen der “Sprache R” besteht eine Herausforderung darin, den Weg zwischen scheinbarer Trivialität und überfordernder Komplexität zu finden: Es gilt die kleinen Schritte ernstzunehmen, sonst werden die grossen Schritte sehr schnell mühsam. Für die zweite Seminarwoche lassen sich folgende Seminarziele festhalten: Sie können die verschiedenen Funktionsweisen der vier Fenster in RStudio erläutern. Sie verstehen den Unterschied zwischen der Arbeit in der Konsole und im Skript. Sie verstehen, wie und wozu man im Skript kommentiert. Sie haben R-Markdown als erweitertes Skript und Arbeitsinstrument kennengelernt. Sie wissen, was ein Arbeitsverzeichnis in R ist und wozu es gut ist. Sie verstehen das erste Grundelement der “Sprache R”: Funktionen Sie wissen, wie Funktionen aufgebaut sind; Sie wissen, wie Sie sich Hilfe zu Funktionen holen; Sie wissen, was Argumente in einer Funktion bewirken. Sie verstehen das zweite Grundelement der “Sprache R”: Objekte Sie verstehen, was es bedeutet, dass in R “alles ein Objekt ist”; Sie wissen, wie man sich die jeweils aktuell verfügbare Objekte anzeigen lässt; Sie haben das Zusammenspiel von Funktionen und Objekte kennengelernt; Sie kennen bereits drei verschiedenen Arten von Objekten. 2.2 Aufgaben Fassen Sie noch einmal für sich und in eigenen Worten die Funktionen der vier Fenster von R zusammen. Oben links findet sich in R-Studio das Skript-Fenster, in dem Befehle eingegeben und kommentiert werden können. Ausgeführt werden diese Befehle erst, wenn Sie Ctrl und Enter drücken (bzw. Cmd &amp; Enter). Diese Eingabe von Kodezeilen wird ergänzt durch die direkte Eingabe in der Konsole. In diesem Fenster läuft das eigentliche Programm R (es ist also dieselbe Ansicht wie wenn Sie R ohne grafische Benutzeroberfläche starten würden). Im Gegensatz zum Skript können hier Befehle nur immer einzeln eingegeben und sie müssen dann direkt ausgeführt werden. Dies ermöglicht ein schneller ausprobieren, aber eben kein wirklich speichern, beständiges überarbeiten, kommentieren und eine klare Dokumentation des Ablaufs, wie dies im Skript erfolgen kann. Die beiden Fenster zur Eingabe von Kode werden vom Environment-Fenster ergänzt. Hier finden sich die abgespeicherten Objekte sowie in den weiteren Reitern die bisher ausgeführten Befehle (History), aber auch eine erweitere Netzwerk- bzw. Serverumgebung (Connections, Build, …), falls Sie z.Bsp. mit weiteren Personen an einem Projekt arbeiten. Im vierten Fenster werden Grafiken, Hilfeseiten, die Vorschau für geknittete Dokumente und auch die Ordnerstruktur angezeigt. Sie finden diverse Einstellungsoptionen zu den vier Fenster und deren Anordnung unter „Tools &gt; Gobal Options“. Dort können Sie etwa unter dem Reiter”General\" die Option zum “Save Workspace to RData on exit” zu Never wechseln. Dies führt dazu, dass Ihre Environment beim Verlassen von R immer gelöscht wird. Dies ist nicht etwa ein Nachteil, sondern eine Technik die Sie dazu veranlasst, alle benötigen Schritte in Ihrem Kode unterzubringen. Weiter könne Sie unter dem Reiter “Spelling” auch noch die Rechtschreibefunktion deaktiveren, da das Feature noch nicht wirklich für die deutsche Rechtschreibung zu funktionieren scheint (bzw. die Ergänzung von neuen Wörterbüchern nicht fehlerfrei abläuft). Die Ordnerstruktur im Reiter Files des vierten Fensters hängt mit Ihrem aktuellen Arbeitsverzeichnis zusammen. Ein Arbeitsverzeichnis ist der Ort, auf den R immer als Erstes zugreift und wo Dinge automatisch abgelegt werden. Dieses können über die Menüsteuerung “Session &gt; Set Working Directory &gt; Choose Directory” oder über den Befehl ‘setwd()’ definieren (erstere Variante ist etwas einfacher). Der ‘getwd()’ Befehl wiederum gibt das aktuell festgelegte Verzeichnis aus. Speichern Sie jeweils Ihr aktuelles Arbeitsverzeichnis als Teil des Markdowns, z.Bsp. so: setwd(&quot;C:/Users/SchweglG/R_Daten/HS20/E3&quot;) #Dies dient in einem Skript oder einem Markdown als Erinnerung, ... #...wo Ihr Arbeitsverzeichnis liegt (und damit wo Sie Ihre Daten wiederfinden) Wir können uns Beispielsweise eine CSV-Datei (Comma Separated Value) aus der Liste unserer installierten Pakete erstellen, und zwar über folgenden Befehl: write.table(pakete_liste, file=&quot;Paketliste_neu.csv&quot;, sep=&quot;,&quot;) Diese CSV-Datei, welche die Liste enhält, sollte dann in Ihrem aktuellen Arbeitsverzeichnis abgelegt werden. Führen Sie sowohl in der Konsole als auch im Skript einige Rechnungen durch und speichern Sie im Skript die Resultate als Kommentare. Hier ein paar Beispielrechnung: 1 + 1 5 + 3 - 4 (5 + 3 - 4) / 5 … Fortsetzung: Was ist der Vorteil der Arbeit im Skript gegenüber dem Schreiben von Code direkt in der Konsole? Sie möchten nun das Ergebnis Ihrer letzten Rechnung als Objekt ‘x’ abspeichern. Wie könnten Sie das in der Konsole tun, ohne dass Sie nochmals den Kode der Rechnung (in unserem Beispiel “(5 + 3 - 4) / 5”) selber schreiben müssten? Und wo ist ‘x’ nun hin – wo oder wie können Sie ‘x’ sehen? Siehe für die Vorteile in der jeweiligen Arbeit die Beschreibungen oben. In der Konsole kann über die beiden Pfeiltasten runter und rauf durch bisher ausgeführte Befehle gescrollt werden. So können Sie die Rechnung erneut aufrufen und dem Objekt ‘x’ zuweisen. Das Objekt taucht dann im Environment-Fenster auf. Es kann dann über die Funktion rm() wieder entfernt werden. Rekapitulieren Sie noch einmal: Was könnten die Vorteile davon sein, mit R Markdown zu arbeiten (Allaire et al. 2020)? Wann arbeitet man besser mit einem klassischen Skript? Schauen Sie sich auch die Formatierungsmöglichkeiten für Fliesstext in den Cheatsheets zu R Markdown an (siehe hier)! Neben der Konsole und dem Skript ist R Markdown die dritte Möglichkeit in R-Studio zu arbeiten (Allaire et al. (2020)).3 R Markown ist ebenfalls ein Paket und ermöglicht im Sinne eines erweiterten Skripts das Erstellen eines dynamische Analysedokumente: Sie kombinieren Kode, gerenderte Ausgaben (z. B. Grafiken) und Text. Eine neue R Markdown Datei kann via «File &gt; New File &gt; R Markdown» oder mit dem Button direkt unter dem «File» Button geöffnet werden. Die Datei selber ist unterteilt in einfachen Fliesstext (weisser Hintergrund) oder sogenannten R Chunk (grauer Hintergrund), Kodestücke für R. Ein R Chunk kann entweder über den «Insert»-Button im R Markdown-Fenster eingefügt werden, oder aber über die Tastenkombination «Ctrl + Alt + i» (bzw. «Cmd + Option + i» bei Mac). Öffnen Sie eine neue R Markdown Datei. Versuchen Sie Ihre bisherigen Notizen zu den Aufgaben und Ihren Code in dieser Datei unterzubringen. Arbeiten Sie für die folgenden Aufgaben mit dieser Datei weiter. Siehe Anmerkungen bei Aufgabe 3. Versuchen Sie allgemein zu beschreiben, was Funktionen und was Objekte sind. Fügen Sie eine kurze Erläuterung in Ihr Markdown-Dokument zur Frage ein, was im folgenden Code jeweils Funktionen und was Objekte (und wenn letzteres, welche Art von Objekt) sind: sqrt(x) help(&quot;sqrt&quot;) ?help y &lt;- c(1, 3, 4, 5, 6, 7, NA) z &lt;- c(7, 8, 10, 11) Die Grundlagen der Sprache von R sind Funktionen und Objekte (vgl. Manderscheid 2017, 25ff), d.h. Befehle in R bestehen aus diesen beiden Elemente. Die Funktionen bestimmen, was mit einem Objekt passiert. Ein Objekt wiederum kann verschiedenste Formen annehmen, etwa eine Zahl, eine Menge von verschiedenen Werten (z.Bsp. ein Datensatz), das Ergebnis einer Funktion – und selbst eine Funktion selber kann wieder zu einem Objekt werden. Dies zeigt sich etwa bei den beiden Hilfe-Funktionen ‘help()’ und ‘?’. Hier wird die Hilfe aufgerufen für eine andere Funktion. Für die weiteren Kodezeilen in der Aufgabe lassen sich jeweils folgende Funktionen und Objekte auflisten: Funktionen Objekte sqrt() x &lt;-, c() y, 1, 3, 4, 5, 6, 7, NA … … Im Objekt y scheint ein fehlender Wert vorhanden zu sein (‘NA’ = Not Available). Möchten man nun etwa die Varianz für dieses Objekt berechnen folgt als Resultat ebenfalls nur “NA”: var(y) ## [1] NA Wie könnten wir trotzdem die Varianz für das Objekt y berechnen? Hier kommen nun Argumente ins Spiel. Argumente erweitern nochmals die Funktionen, in dem Sie deren Details bestimmen. Wir können so etwa definieren, dass die Funktion ‘var()’ beim Objekt y die fehlende Werte ignoriert: var(y, na.rm = T) ## [1] 4.666667 Unser Objekt z scheint hingegen keine solchen fehlenden Wert zu beinhaltet. Trotzdem scheint etwas nicht zu stimmen, wenn Sie das Resultat der Funktion zur Berechnung Standardabweichung ‘sd()’ mit dem Ergebnis der dazugehörigen Formel vergleichen (vgl. Diaz-Bone 2019, 50f).4 Was könnte das Problem sein und wo die Lösung liegen? Bonusaufgabe: Sehen Sie sich die Hilfeseite der Funktion matrix() an. Wozu dient diese Funktion? Welche Argumente akzeptiert / benötigt sie und wozu dienen diese? Illustrieren Sie die Funktionsweise anhand von ein paar Beispielen. R kennt verschiedenste Arten von Objekten (fürs Erste bleiben wir hier bei verschiedenen Objekten für Zahlen). Im bisherigen Verlauf haben Sie bereits einzelne Zahlen sowie Vektoren als eine Reihe von Zahlen kennengelernt. Über die Funktion ‘matrix()’ lässt sich nun ein dritter Objekttyp generieren, nämlich eine Matrix. Matrizen enthalten Zeilen und Spalten des jeweils selben Datentyps.5 matrix(c(1,2,3,4,5,6,7,8,9,10), nrow = 2, ncol = 5) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 Auch lässt sich so beispielsweise eine Art sozialwissenschaftlicher Datensatz erstellen: einstell &lt;- c(1,3,5,4,3) koerp_g &lt;- c(176,180,192,156,168) gndr &lt;- c(1,2,1,2,0) daten &lt;- matrix(c(einstell, koerp_g, gndr), nrow = 5, ncol = 3, byrow = F) daten ## [,1] [,2] [,3] ## [1,] 1 176 1 ## [2,] 3 180 2 ## [3,] 5 192 1 ## [4,] 4 156 2 ## [5,] 3 168 0 In der Kodezeilen, wo die Funktion matrix() enthalten ist, sind wiederum Argumente vorhanden, nämlich ‘nrow’, ‘ncol’ und ‘byrow’. Die genaue Funktion der Argument ist ebenfalls auf der Hilfeseite der Funktion ersichtlich. References "],
["wochenplan-03.html", "3 Wochenplan 03 3.1 Lernziele WP03 3.2 Aufgaben WP03", " 3 Wochenplan 03 …zur Einheit vom 01. &amp; 08.10.2020, Grundlagen (Teil 2) 3.1 Lernziele WP03 In der dritten Seminarwoche vertiefen wir Elemente der Programmiersprache R, die Sie bereits kennengelernt haben, und betten sie in neue Zusammenhänge ein. Das Ziel ist es, das Verständnis von Funktionen und Objekten, von den verschiedenen Arten von Objekten in R sowie immer auch von der “Grammatik” dieser Sprache weiter zu schärfen. Zusätzlich werden in dieser Woche zwei neue Grundlagen eingeführt: Erstens die verschiedenen Arten von Daten, mit denen wir in R arbeiten: Zahlen, Text und logische Werte; zweitens einige Möglichkeiten, über bestimmte Funktionen systematisch Vektoren zu definieren. Zusammenfassend lassen sich damit folgende Seminarziele festhalten: Sie können mittels Argumenten eine Funktion spezifizieren und damit Einfluss auf die Details der Berechnung und der Ergebnisdarstellung nehmen. Sie können die drei bisher kennengelernten Objekttypen (einzelne Zahl, Vektor, und Matrix) kombinieren. Sie kennen die drei verschiedenen Datenarten von R: Sie verstehen die Rolle von numerischen Daten, Sie verstehen die Rolle von textförmigen Daten Sie verstehen die Rolle von logischen Daten. Sie können Vektoren mittels der Funktionen … … seq() … sowie rep() definieren … und diese auf alle drei Arten von Daten anwenden. 3.2 Aufgaben WP03 Der Vektor v besteht aus folgenden Zahlen: 1, 3, 7, 9, 22, 2, 8, 14, 20, 3, 7, 9, 11, und 13. Berechnen Sie auf drei verschiedenen Arten das arithmetische Mittel dieses Vektors. v &lt;- c(1, 3, 7, 9, 22, 2, 8, 14, 20, 3, 7, 9, 11, 13) Eine erste Möglichkeit, das arithmetische Mittel zu berechnen, ist das manuelle Aufsummieren und das anschliessende Teilen durch die Anzahl Elemente. (1+ 3+ 7+ 9+ 22+ 2+ 8+ 14+ 20+ 3+ 7+ 9+ 11+ 13)/14 ## [1] 9.214286 Diese manuelle Variante kann etwa über die “Find/Replace” Funktion von R Studio erleichtert werden, indem die Kommata durch Pluszeichen ersetzt werden. Eine zweite Möglichkeit bietet die Kombination der Funktionen ‘sum()’ und ‘lenght()’, welche die oben manuell ausgeführten Schritte umsetzen. sum(v)/length(v) ## [1] 9.214286 Die dritte Möglichkeit ist natürlich die Funktion für das arithmetische Mittel selber, ‘mean()’: mean(v) ## [1] 9.214286 Was macht das Argument ‘trim’ für die Funktion mean()? Wozu könnten Sie dieses Argument in einem sozialwissenschaftlichen Kontext nutzen? Spezifizieren Sie das Argument auf sinnvolle Weise, um das arithmetische Mittel des in Aufgabe 1 erstellten Vektors v zu berechnen! Mittels des Arguments ‘trim’ können Sie Anteile der Elemente eines Vektors für die Berechnung entfernen, also etwa die kleinsten und grössten 10%: mean(v, trim = 0.1) ## [1] 8.833333 sort(v) ## [1] 1 2 3 3 7 7 8 9 9 11 13 14 20 22 mean(c(2,3,3,7,7,8,9,9,11,13,14,20)) ## [1] 8.833333 Damit können sowohl die kleinen wie auch die grossen Extremwerte bei der Berechnung eines Durchschnitts ignoriert werden. Erstellen Sie vier verschiedene Vektoren mit je einer Länge von vier und verbinden Sie diese zu einer 4x4-Matrix. Die Funktion apply() erlaubt Ihnen, eine Funktionen wie z.B. mean() oder var() auf diese Matrix anzuwenden. Nur wie genau? Sehen Sie sich die Hilfe zu apply() an, probieren Sie die Funktion aus und versuchen Sie zu verstehen, wie sie genau funktioniert. Erläutern Sie apply() dann in eigenen Worten und mit Hilfe der von Ihnen erzeugten 4x4-Matrix! m1 &lt;- c(2,4,7,9) m2 &lt;- c(8,9,5,2) m3 &lt;- c(3,5,5,5) m4 &lt;- c(9,8,7,6) ma &lt;- cbind(m1,m2,m3,m4) mb &lt;- rbind(m1,m2,m3,m4) ma ## m1 m2 m3 m4 ## [1,] 2 8 3 9 ## [2,] 4 9 5 8 ## [3,] 7 5 5 7 ## [4,] 9 2 5 6 mb ## [,1] [,2] [,3] [,4] ## m1 2 4 7 9 ## m2 8 9 5 2 ## m3 3 5 5 5 ## m4 9 8 7 6 apply(ma, 1, mean) ## [1] 5.5 6.5 6.0 5.5 apply(ma, 2, mean) ## m1 m2 m3 m4 ## 5.5 6.0 4.5 7.5 apply(mb, 1, mean) ## m1 m2 m3 m4 ## 5.5 6.0 4.5 7.5 apply(mb, 2, mean) ## [1] 5.5 6.5 6.0 5.5 Nachdem die vier Vektoren erstellt wurden lassen sie sich über die ‚rbind()‘ und ‚cbind()‘ Funktionen auf zwei verschiedene Weisen zu einer Matrix verbinden, entweder Zeilen- oder Spalte-weise (siehe die Objekte ma und mb). ‘apply()’ als nächster Schritt wendet eine bestimmte Funktion auf ein Objekte an. Bei einem Objekt des Typs Matrix muss allerdings noch spezifiziert werden, ob die Funktion Zeilen- oder Spalte-weise angewendet wird. Zielen oder Spalten werden über die Zahlen 1 bzw. 2 definiert. So ergeben sich insgesamt vier Möglichkeiten, für die Berechnung der des Durchschnitts – allerdings generieren diese vier Möglichkeiten nur zwei unterschiedliche Ergebnisse. Erstellen Sie je einen Vektor mit numerischen Daten, textförmigen Daten und logischen Daten. Die Funktionen as.numeric(), as.character() und as.logical() lassen Sie eine Datenarten in eine andere “zwingen” bzw. als eine andere Datenart interpretieren. Wann funktioniert dies? Und wo sind die Grenzen dieses “Zwingens”? a &lt;- c(0, 1, 2) b &lt;- c(&quot;null&quot;, &quot;eins&quot;, &quot;zwei&quot;) #die Anführungs- und Schlusszeichen beachten b2 &lt;- c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;) c &lt;- c(TRUE, FALSE, T) #Die logischen Objekte können sowohl ausgeschreiben als auch lediglich als T und F aufgeführt werden Nachdem wir die Vektoren definiert haben, können wir deren Typ bestimmen und mit den ‘as.’-Funktionen spielen: is.numeric(a) ## [1] TRUE is.character(b) ## [1] TRUE is.character(b2) ## [1] TRUE is.logical(c) ## [1] TRUE as.numeric(b) ## Warning: NAs durch Umwandlung erzeugt ## [1] NA NA NA as.numeric(b2) ## [1] 0 1 2 as.numeric(c) ## [1] 1 0 1 as.character(a) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; as.character(c) ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; as.logical(a) ## [1] FALSE TRUE TRUE as.logical(b) ## [1] NA NA NA as.logical(b2) ## [1] NA NA NA Die Grenzen dieses “Zwingens” der ’as.-’Funktionen finden sich auf der einen Seite bei ausgeschriebenen Zahlen in einem Charakter-Vektor. Diese ausgeschriebenen Zahlen können von R nicht in numerische oder auch logische Daten umformuliert werden. Anderseits zeigen sich die Grenzen im Zusammenhang zu den logischen Daten: Hier funktioniert das “Zwingen” nur mit numerische Daten – und alles über 1 wird als TRUE interpretiert. Definieren Sie folgende Vektoren mittels der Funktionen seq() und rep(): Vektor 5a: 1 2 3 4 5 6 7 8 9 10 seq(from = 1, to = 10, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 seq(1:10) ## [1] 1 2 3 4 5 6 7 8 9 10 #oder 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 Vektor 5b: 1 1 1 2 2 2 3 3 3 c(rep(1,3), rep(2,3), rep(3,3)) ## [1] 1 1 1 2 2 2 3 3 3 Vektor 5c: Die Zahlen des Vektors b als ausgeschriebene Wörter c(rep(&quot;eins&quot;,3), rep(&quot;zwei&quot;,3), rep(&quot;drei&quot;,3)) ## [1] &quot;eins&quot; &quot;eins&quot; &quot;eins&quot; &quot;zwei&quot; &quot;zwei&quot; &quot;zwei&quot; &quot;drei&quot; &quot;drei&quot; &quot;drei&quot; Vektor 5d: 1 4 7 10 13 seq(1,13,3) ## [1] 1 4 7 10 13 Vektor 5e: 1 1 1 1 2 3 4 5 c(rep(1,3), 1:5) ## [1] 1 1 1 1 2 3 4 5 "],
["wochenplan-04.html", "4 Wochenplan 04 4.1 Lernziele WP04 4.2 Aufgaben WP04 4.3 Hinweise für den Wochenplan 05", " 4 Wochenplan 04 …zur Einheit vom 08. &amp; 15.10.2020, Korrelationen, Verteilungen und erstes grafisches Arbeiten (Vorbereitung Inferenzstatistik) 4.1 Lernziele WP04 Nachdem wir uns bereits Grundlagen für die Arbeit mit R und R Studio erarbeitet haben, wollen wir in der vierten Woche nun erste statistische Inhalte bzw. Methoden einführen und diese mit neuen Arbeitstechniken in R Studio ergänzen. Zu ersteren gehören in dieser Woche die bivariaten Zusammenhänge von metrischen Variablen (Korrelation) und verschiedene Zufallsverteilungen. Als Arbeitstechniken wollen wir neu grafische Techniken in R kennenlernen. Der vierte Wochenplan soll uns so nicht zuletzt vorbereiten, das Prinzip der Inferenzstatistik mittels R zu verstehen. Konkret lassen sich folgende Seminarziele festhalten: Sie verstehen, was eine Korrelation von zwei Variablen bedeutet und können bivariate Zusammenhänge in R berechnen und interpretieren. Sie können zwei Variablen in einem Streudiagramm darstellen und die Darstellungen interpretieren. Sie kennen den Unterschied von Gleichverteilungen und Normalverteilungen und können in R entsprechend verteilte Zufallsvariablen erstellen. Sie können metrische Verteilungen in Histogrammen darstellen. Sie haben erste Techniken kennenglernt, wie Grafiken erweitert und kombiniert werden können. Sie haben sich in R die Grundlagen für ein Verständnis von Inferenzstatistik allgemein und des Stichprobenfehlers im Besonderen erarbeitet. 4.2 Aufgaben WP04 Sie sollen verschiedene Paare von Vektoren mittels der Funktionen ‘c()’, ‘rep()’ und ‘seq()’ definieren, die jeweils unterschiedlich korrelieren. Diese Vektoren – d.h. Variablen – und deren Korrelationen sollen sozialwissenschaftlichen Phänomenen entsprechen. Berechnen Sie jeweils den Korrelationskoeffizienten. Ein Paar von Vektoren (mit je einer “Länge” von rund 100) soll eine Korrelation von ca. 0.4 aufweisen (…ein Beispiel von Frau Kurmann). x1 &lt;- c(seq(4100,14000,100)) y1 &lt;- c(rep(2, 5), rep(1, 7), rep(4, 18), rep (5, 35), rep(3, 25), rep(6, 10)) cor(x1, y1) ## [1] 0.3768417 Ein Paar von Vektoren (mit je einer “Länge” von rund 100) soll eine sehr starke Korrelation aufweisen (…ein Beispiel von Herr Ineichen). x2 &lt;- c(1,1,1,1,1, rep(seq(from=2, to=9), each=11),10,10,10,10,10,10) y2 &lt;- y2 &lt;- c(1,1,1,1, rep(seq(from=2, to=9), each=11),10,10,10,10,10,10,10) cor(x2,y2) ## [1] 0.9940175 Ein Paar von Vektoren (mit je einer “Länge” von rund 100) soll eine schwache, negative Korrelation aufweisen (…ein leicht angepasstes Beispiel von Frau Stöckli). #Originalbeispiel x3 &lt;- c(rep(0:1, 50)) y3 &lt;- c(rep(1, 30), rep(2, 35), rep(3, 21), rep(4, 10), rep(5, 4)) cor(x3, y3) #Dies ergibt leider eine schwache positive Korrelation. Deshalb hier einfach leicht angepasst: ## [1] 0.009064354 x3 &lt;- c(rep(c(1,0),50)) y3 &lt;- c(rep(1, 30), rep(2, 35), rep(3, 21), rep(4, 10), rep(5, 4)) cor(x3, y3) ## [1] -0.009064354 Nutzten Sie ‘plot()’ um die Verteilungen Ihrer drei Variablen-Paare darzustellen. Verweisen Sie im Titel und in den Achsenbeschriftungen auf das sozialwissenschaftliche Phänomen, das Sie darstellen. Im Folgenden werden die drei Plots der Korrelationen dargestellt. Die zweite Grafik wird noch über eine Linie ergänzt, mit der die Korrelation etwas visualisiert wird. ACHTUNG: Der b0-Wert dieser Linie ist lediglich geschätzt (und ebenfalls müssen die Grössenordnungen der beiden Variablen ähnlich sein, damit dies hier funktioniert). Die dritte Grafik wurde über die Funktion ‘jitter()’ ergänzt. Sie visuliert die einzelne Fälle in einem Plot über eine leichte, künstliche Streuung der Werte. #Plot der ersten beiden Vektoren plot(x1/1000, y1, main = &quot;Korrelation Einkommen und Anzahl Zimmer&quot;, xlab = &quot;Einkommen in CHF&quot;, ylab = &quot;Anzahl Zimmer im Haushalt&quot;) #Plot der zweiten beiden Vektoren plot(x2, y2, xlim = c(0,18), main = &quot;Korrelation Alters- und Schuljahre&quot;, xlab =&quot;Alter in Jahren&quot;, ylab = &quot;bisherige Schulzeit in Jahren (ohne Kindergarten)&quot; ) abline(a = 0.5, b = cor(x2,y2), col = &quot;red&quot;) #Plot der dritten beiden Vektoren plot(jitter(x3), jitter(y3), main = &quot;Korrelation Geschlecht und Einkommen&quot;, xlab = &quot;Geschlecht&quot;, ylab = &quot;Einkommensklasse&quot;) Erstellen Sie je einen Vektor für eine Gleichverteilung mittels ‘runif()’ und für eine Normalverteilung mittels ‘rnorm()’. Diese Vektoren sollen als Variablen Körpergrössen repräsentieren. Erstellen Sie die beiden Vektoren in unterschiedlichen Längen, und zwar… …mit je 10, …mit je 30 …und mit je 1000 Fällen. Im Folgenden werden die in der Aufgabe verlangten Verteilungen als Histogramme dargestellt. Insbesondere bei grösseren Fallzahlen werden so die Eigenschaften der Verteilungen deutlicher: Bei der Gleichverteilung hat jede Ausprägung dieselbe Auftrittswahrscheinlichkeit. Das heisst, dass jede Körpergrösse zwischen Minimal- und Maximalwert mit derselben Häufigkeit vorkommt. Dies entspricht aber nicht der empirischen Realität von Körpergrössen. Bei der Normalverteilung gruppieren sich die meisten Werte um den Mittelwert von 170cm, während kleine und grosse Werte mit zunehmender Abweichung immer weniger häufig auftreten. Dies wiederum entspricht stärker der tatsächlichen, empirischen Verteilungen von Körpergrössen. Unterschieden werden die Normalverteilungen auch in der Funktion ‘rnorm()’ über die beiden expliziten Parameter des arithmetischen Mittels und der Standardabweichung (Diaz-Bone 2019, 140f). hist(runif(10,150,210)) hist(runif(30,150,210)) hist(runif(1000,150,210)) hist(rnorm(10, 170,10)) hist(rnorm(30, 170,10)) hist(rnorm(1000, 170,10)) Als Ergänzung:‘runif’ und ‘rnorm()’ werden noch von der Funktion ‘rbinom()’ ergänzt, die zufällige binomiale Verteilungen erstellt. Dies sind Verteilungen die Ihnen angeben, ob ein Ereignis bei einer bestimmten Wahrscheinlichkeit eingetreten ist oder nicht. Damit kann zum Beispiel aufgezeigt werden, wie oft Sie bei zehn Münzwürfen Kopf bekommen (Beispiel I), oder auch wie oft Sie bei dreimal würfeln mit zwei Würfeln eine Sechs erzielen (Beispiel II). rbinom(10,1,0.5) #Beispiel I ## [1] 0 1 0 1 1 1 0 0 0 1 rbinom(3,2, 2/6) #Beispiel II ## [1] 0 1 2 Als nächstes sollen Sie die beiden Verteilungen aus der Aufgabe 4, die 1.000 Fälle aufweisen, grafisch darstellen. Nutzen Sie die Funktion für Histogramme, um die beiden Verteilungen darzustellen. Die beiden Histogramme sollen dieselbe Spannbreite in der x-Achsen haben und jeweils 10 Klassen aufweisen. Wählen Sie je eine Farbe für die Gleich- und Normalverteilung. Über die Funktion ‘abline()’ kann dem aktuellen Plot eine Linie hinzugefügt werden. Fügen Sie jeweils einem Histogramm den Mittelwert der anderen Verteilung als vertikale Linie hinzu (ebenfalls in der entsprechenden Farbe). Bonusaufgabe: Das Argument ‘add = TRUE’ lässt Sie eine neue Grafik über die aktuelle Grafik legen. Versuchen Sie, auf diese Art Ihre beiden Histogramme in einer Grafik darzustellen. Die folgenden Histogramme zeigen die beiden Verteilungen, inklusive den Mittelwerten der jeweils anderen Verteilung als horizontale Linie. Um diese Linie besser ersichtlich zu machen wurde sie mittels des Arguments ‘lwd’ breiter gemacht. hist(runif(1000,150,210), breaks = 10 , xlim = c(140,220), col = &quot;blue&quot;, main = &quot;Körpergrösse, gleichverteilt&quot;) abline(v = mean(rnorm(1000, 170,10)), col = &quot;green&quot;, lwd = 5) hist(rnorm(1000, 170,10), breaks = 10 , xlim = c(140,220), col = &quot;green&quot;, main = &quot;Körpergrösse, normalverteilt&quot;) abline(v = mean(runif(1000,150,210)), col = &quot;blue&quot;, lwd = 5) Der nachfolgende Code generiert nun die sich überlagernden Histogramme über das Argument ‘add = T’ in der zweiten Grafik. Zusätzlich muss noch bei der Darstellung der Gleichverteilung die y-Achse angepasst werden, da die Normalverteilung Klassen mit höheren Häufigkeiten aufweist. Weiter wurde über die ‘rgb()’ Funktion die Farbei “grün” transparent gemacht (vgl. auch hier). hist(runif(1000,150,210), breaks = 10 , xlim = c(140,220), ylim = c(0,200), col = &quot;blue&quot;, main = &quot;Körpergrösse, gleichverteilt und normalverteil&quot;) hist(rnorm(1000, 170,10), breaks = 10 , col=rgb(0,255,0, max = 255, alpha = 125), add = T) 4.3 Hinweise für den Wochenplan 05 Im Rahmen des Wochenplans 05 und der dazugehörigen Falllösung wird das Zugreifen auf Daten (Indizieren und Subsetting) sowie die sogenannte if-Schlaufe relevant. Der folgende Abschnitt zeigt nochmals kurz die Elemente, die am Ende der Einheit vom 15.10.2020 eingeführt wurden. Beim Zugreifen auf Daten – das heisst dem Indizieren – und dem Erstellen von Teildatensätzen – dem Subsetting – werden drei verschiednen Weisen unterscheiden. [ ]: Die erste Art und Weise dies zu tun ist über die Verwendung von eckigen Klammer (vgl. Manderscheid 2017, 57ff). #Auf einzelne Elemente vektor1 &lt;- c(1,2,10,5,13,20) vektor1[4] ## [1] 5 datensatz &lt;- data.frame(vektor1, c(1,1,1,1,2,1)) datensatz[1,1] ## [1] 1 datensatz[6,1] ## [1] 20 datensatz[,0] ## data frame with 0 columns and 6 rows $: Die zweite Möglichkeit auf Datenzuzugreifen ist der Dollar-Operator $. Damit wird ein Dataframe als Liste angesprochen und die Funktion gibt einen Vektor (bzw. eine Variable) zurück (vgl. Sauer 2019, 59). datensatz$vektor1 ## [1] 1 2 10 5 13 20 which(): Die dritte Weise um Daten zu indizieren bildet die ‘which()’-Funktion die danach fragt, welche Fälle einer bestimmten Bedingung entsprechen. which(datensatz$vektor1==20) ## [1] 6 Wie bereits bei der ‘which()’-Funktion ersichtlich lassen sich diese drei Varianten natürlich kombinieren. Im folgenden Beispiel wird etwa ein Teildatensatz erstellt, in dem alle Fälle enthalten sind, die beim vektor1 einen Wert von 20 aufweisen (beachten Sie die doppelten Gleich-Zeichen bei der logischen Bedingung). t_datensatz &lt;- datensatz[which(datensatz$vektor1==20),] t_datensatz &lt;- datensatz[datensatz$vektor1==20,] #derselbe Befehl, einfach ohne which() auszuformulieren Neben dem Zugreifen auf Daten findet sich auch eine Teilaufgabe in den Falllösungen 05, in der Sie eine eigenen if-Schleife programmieren sollen. Schleifen ermöglichen es, dass bestimme Funktionen (Schleifeninhalt) mehrmals ausgeführt werden können. Die Häufigkeit dieser Ausführung wird in einer Schleife über eine Bedingung definiert (Schleifenkontrolle). Sie für weitere Ergänzugen zu Schleifen auch Manderscheid (2017) auf S.206f, hier, und…. for (variable in vector) { #Schleifenkontrolle funktion; #Schleifeninhalt } Hier drei Beispiele für eine solche if-Schleife: for(i in 0:5) { print(i); } ## [1] 0 ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 for(i in 1:2) { print(datensatz[,i]); } ## [1] 1 2 10 5 13 20 ## [1] 1 1 1 1 2 1 for(i in 1:ncol(datensatz)) { print(datensatz[,i]); } ## [1] 1 2 10 5 13 20 ## [1] 1 1 1 1 2 1 References "],
["wochenplan-05.html", "5 Wochenplan 05 5.1 Lernziele WP05 5.2 Aufgaben WP05", " 5 Wochenplan 05 …zur Einheit vom 15. &amp; 22.10.2020, Zugreifen auf Daten (Indizieren und Subsetting) sowie if-Schleifen (Vorbereitung Inferenzstatistik, Teil 2) 5.1 Lernziele WP05 Ihre zentrale Aufgabe für die vergangene Woche bestand darin, R zu nutzen, um selbstständig “statistisch sinnvolle” Daten zu erzeugen und mit diesen zu arbeiten. Dazu haben wir zusätzlich zu den Funktionen ‘seq()’ und ‘rep()’ erstmals mit Zufallsvariablen gearbeitet, mit ‘cor()’ eine erste bivariate statistische Funktion eingesetzt sowie Streudiagramme und Histogramme erstellt. In der kommenden Arbeitswoche geht es nun darum, zwei neue Aspekte der Arbeit mit R kennenzulernen und einzuüben: das Zugreifen auf einzelne Elemente und Teile von Datenobjekten (Indizieren und Subsetting) und die Kontrolle von längeren Befehlsabläufen. Ausserdem werden wir mit Dataframes eine wichtige Art von Datenstrukturen in R einführen. Folgende Lernziele lassen sich festhalten: Sie verstehen, was ein Dataframe in R ist und können die Unterschiede zu einer Matrix benennen. Sie können gezielt auf einzelne Teile eines Datenobjekts zugreifen und kennen verschiedene Wege, das zu tun. Sie verstehen, wie eine for-Schleife funktioniert und können einfache Varianten davon selbst erstellen. Sie beginnen in der Arbeit mit R gezielt Funktionen zur Abfrage von Attributen von Objekten zu nutzen. 5.2 Aufgaben WP05 Erzeugen Sie ein Dataframe, das aus fünf Variablen besteht und 100 Fälle umfasst. Nutzen Sie dazu die verschiedenen Funktionen, die wir in den letzten beiden Wochen kennengelernt haben (Zufallsvariablen, rep(), seq() …). Probieren Sie ebenfalls, dass die fünfte Variablen dem Character Datenformat entspricht. Überlegen Sie sich einen sozialwissenschaftlichen Kontext für dieses Dataframe und benennen Sie die Variablen dementsprechend. Für den folgenden Datensatz wurden unter anderem Beispiel aus der letzten Falllösung genommen (WP04, Aufgabe 1) und mit Zufallsvariablen ergänzt: Geschlecht &lt;- round(runif(100),0) Einkommen_CHF &lt;- c(seq(4100,14000,100)) AnzahlZimmer_H &lt;- c(rep(2, 5), rep(1, 7), rep(4, 18), rep (5, 35), rep(3, 25), rep(6, 10)) Schulzeit_J &lt;- round(rnorm(100,14,2),0) Einkommen_Kl &lt;- c(rep(&quot;unterd&quot;, 19), rep(&quot;durchs&quot;, 41), rep(&quot;ueberd&quot;, 40)) #stammt nicht aus einer Lösung datensatz &lt;- data.frame(Geschlecht,Einkommen_CHF,AnzahlZimmer_H,Schulzeit_J,Einkommen_Kl) Wenden Sie die Funktionen ‘dim()’, ‘names()’, ‘str()’, ‘class()’ und ‘typeof()’ auf Ihr Dataframe an. Was sagen Ihnen diese Funktionen jeweils? Welcher Output dieser Funktionen leuchtet Ihnen ein, welcher weniger? Die folgenden Funktionen geben Ihnen… dim(datensatz) ## [1] 100 5 …die Dimensionen Ihres Datensatzes aus, das heisst die Zeilen- und Spaltenzahl, was der Anzahl Fällen und Variablen im Datensatz entspricht; names(datensatz) ## [1] &quot;Geschlecht&quot; &quot;Einkommen_CHF&quot; &quot;AnzahlZimmer_H&quot; &quot;Schulzeit_J&quot; ## [5] &quot;Einkommen_Kl&quot; …die Namen Ihrer Vektoren aus, also die Variablennamen im Datensatz; str(datensatz) ## &#39;data.frame&#39;: 100 obs. of 5 variables: ## $ Geschlecht : num 0 0 0 1 0 0 1 1 0 1 ... ## $ Einkommen_CHF : num 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 ... ## $ AnzahlZimmer_H: num 2 2 2 2 2 1 1 1 1 1 ... ## $ Schulzeit_J : num 15 15 13 12 12 14 14 14 12 16 ... ## $ Einkommen_Kl : chr &quot;unterd&quot; &quot;unterd&quot; &quot;unterd&quot; &quot;unterd&quot; ... …die Struktur Ihres Datensatzes aus, das heisst die Unterobjekte bzw. Variablen im Datensatz, auf die Sie mittels dem Dollarzeichen zugreifen können. class(datensatz) ## [1] &quot;data.frame&quot; …die Klasse Ihres Objektes ‘datensatz’ aus, das heisst die von Ihnen zugewiesene Eigenschaft des Objektes; typeof(datensatz) ## [1] &quot;list&quot; …und den Typ Ihres Objektes, das heisst die R-interne Art und Weise, das Objekt abzuspeichern (vgl. Kabacoff 2015, 23ff). Schreiben Sie eine for-Schleife, die Ihnen für die vier numerischen Spalte Ihres Dataframes den Mittelwert berechnet. for (i in 1:(dim(datensatz)[2]-1)) { print(mean(datensatz[,i])) } ## [1] 0.43 ## [1] 9050 ## [1] 3.99 ## [1] 13.75 Einige Hinweise hierzu: Der Zusatz ‘(dim(datensatz)[2]-1))’ generiert lediglich die Zahl 4. Die for-Schleife soll ja den Mittelwerte für die vier numerischen Variablen des Datensatzes berechnen. Dies könnte man auch einfach hinschreiben (‘i in 1:4’) oder mit verschiedenen weiteren Möglichkeiten erreichen (etwa über ‘(ncol(datensatz)-1)’). Der Vorteil einer so definierten (anstatt hingeschriebenen) Variante ist, dass wir eigentlich gar nicht wissen müssten wieviele Variablen das wären – und die Anzahl variieren könnte. for (i in 1:4) { print(mean(datensatz[,i])) } ## [1] 0.43 ## [1] 9050 ## [1] 3.99 ## [1] 13.75 #...funktioniert auch... Innerhalb der geschweiften Klammern wird definiert, was für jedes i wiederholt werden soll. In unserem Beispiel ist dies die Berechnung des Mittelwertes, während mit i unsere vier verschiedenen Variablen bezeichnet werden. Die Funktion ‘print()’ stellt sicher, dass die berechneten Werte auch ausgegeben werden. Weitere tolle Lösungsvorschläge: #...von Frau Diethelm for(v in datensatz[,1:4]) { print(mean(v)) } #...von Herr Ineichen (allerdings mit einem kleinen Problem) for(i in seq_along(datensatz)){ print(mean(datensatz[,i])) } #..von Frau Nguyen mit cleverem Zusatz for (i in names(datensatz)) { if(class(datensatz[,i])==&#39;numeric&#39;){ print(mean(datensatz[,i])) } } Überprüfen Sie Ihre Ergebnisse, indem Sie die Berechnung des Mittelwerts “händisch” für jede Spalte einzeln durchführen (nutzen Sie dazu Indizierung/Subsetting mittels eckiger Klammern). mean(datensatz[,1]) #entspricht mean(datensatz$Geschlecht) ## [1] 0.43 mean(datensatz[,2]) #... mean(datensatz$Einkommen_CHF) ## [1] 9050 mean(datensatz[,3]) #... ## [1] 3.99 mean(datensatz[,4]) ## [1] 13.75 Definieren Sie als eine erste Variante eine logische Bedingung, die Ihnen erlaubt, Ihr Dataframe anhand der Character-Variable in ungefähr zwei Gruppen zu teilen. Teilen Sie dann als zweite Variante Ihren Datensatz anhand einer anderen logischen Bedingung mit einer Ihrer numerischen Variablen in zwei Gruppen. In diesen logischen Bedingung können wir verschiedene logische Operatoren verwenden (vgl. Manderscheid 2017, 26): gleich == ungleich != größer &gt; größer gleich &gt;~ kleiner &lt; kleiner gleich &lt;~ und &amp; oder | #Variante 1 datensatz_v11 &lt;- datensatz[datensatz$Einkommen_Kl==&quot;durchs&quot;,] datensatz_v12 &lt;- datensatz[datensatz$Einkommen_Kl!=&quot;durchs&quot;,] #Variante 1 datensatz_v21 &lt;- datensatz[datensatz$Einkommen_CHF&lt;9900,] datensatz_v22 &lt;- datensatz[datensatz$Einkommen_CHF&gt;10000,] Die erste Variante generiert zwei Teildatensätze, wobei im ersten alle mit durchschnittlichem Einkommen enthalten sind und im zweiten Teildatensatz diejenigen, die entweder über ein unter- oder überdurchschnittliches Einkommen verfügen. Die zweite Variante generiert zwei Teildatensätze indem eine Unterscheidung getroffen wird zwischen denjenigen, die entweder mehr oder weniger als 10’000CHF pro Monat verdienen. Wieso verwendet man hierfür nun nicht einfach eine Funktion, z.Bsp. ‘subset()’ (oder auch ‘split()’)? subset(datensatz, subset = datensatz$Einkommen_Kl==&quot;durchs&quot;) #das würde auch gehen Die Überlegungen, die wir machen, sollen immer einem Objekt gelten, d.h. wir wollen ein Bewusstsein für ein Objekt schaffen – im Beispiel des data.frames hat dieses Objekt eben Zeilen und Spalten und diesen können wir indizieren. Wir brauchen keine spezifischen Funktionen sondern können immer in einem allgemeinen Sinne (gemäss den drei Varianten [], $, which()) auf Objekte zugreifen. Dieses Zugreifen können wir immer verwenden – für Funktionen, für Argumente, für Teildatensätze (Subsetting), usw. Das Erstellen von Teildatensätzen kann nun auch komplexer werden durch verschiedenen Kombinationen. Im Folgenden werden zuerst die unterdurchschnittlichen und die durchschnittlichen Einkommen in einem Datensatz gepackt (Beispiel 1) und dann die Männer (Geschlecht==0), die unterdurchschnittlich viel Geld verdienen (Beispiel 2). # datensatz[datensatz$Einkommen_Kl==c(&quot;unterd&quot;, &quot;durchs&quot;),] !!! funktionert nicht!!! #...die funktionierenden Kombinationen: datensatz[datensatz$Einkommen_Kl==&quot;unterd&quot; | datensatz$Einkommen_Kl== &quot;durchs&quot;,] #Bsp1 datensatz[datensatz$Einkommen_Kl==&quot;unterd&quot; &amp; datensatz$Geschlecht==0,] #Bsp2 Berechnen Sie bei einer der beiden Varianten aus Aufgabe 6 dann noch einmal die Mittelwerte pro Spalte, aber getrennt für diese beiden Gruppen. Hierfür konnte nun einfach die for-Schleife nochmals genutzt werden: #...für den ersten Teildatensatz der ersten Variante for (i in 1:4) { print(mean(datensatz_v11[,i])) } ## [1] 0.3170732 ## [1] 8000 ## [1] 4.731707 ## [1] 13.56098 #...für den zweiten Teildatensatz der ersten Variante for (i in 1:4) { print(mean(datensatz_v12[,i])) } ## [1] 0.5084746 ## [1] 9779.661 ## [1] 3.474576 ## [1] 13.88136 #...für den ersten Teildatensatz der zweiten Variante for (i in 1:4) { print(mean(datensatz_v21[,i])) } ## [1] 0.3448276 ## [1] 6950 ## [1] 3.948276 ## [1] 13.74138 #...für den zweiten Teildatensatz der zweiten Variante for (i in 1:4) { print(mean(datensatz_v22[,i])) } ## [1] 0.575 ## [1] 12050 ## [1] 4 ## [1] 13.725 References "],
["wochenplan-06.html", "6 Wochenplan 06 6.1 Lernziele WP06 6.2 Aufgaben WP06", " 6 Wochenplan 06 6.1 Lernziele WP06 Über die vergangenen Wochen haben wir zahlreiche grundlegende Aspekte der Arbeit mit R kennengelernt. Als Vorbereitung im Rahmen des Wochenplans 06 sollen Sie diese Inhalte noch einmal Revue passieren zu lassen. Im Rahmen dieser Repetition werden weiter zwei neue Dinge vermittelt werden: Auf der einen Seite erfolgt die Schulung aktiver Rezeptionsfertigkeiten (sprich: R-Code lesen und verstehen lernen). Auch dies ist eine wichtige Arbeitstechnik in R. Auf der anderen Seite sollen Sie mit dem rezipierten Code das Prinzip der Inferenzstatistik (und der Stichprobenverteilung sowie des Standardfehlers) in R veranschaulicht bekommen. Konkret lassen sich folgende Seminarziele festhalten: Sie können von einer anderen Person geschriebenen R-Code entziffern und mit Kommentaren versehen. Sie entwickeln dabei ein Gefühl für unterschiedliche Arten, Code lesbar zu gestalten. Sie wissen, wie selbstgeschriebene Funktionen in R aussehen und können diese Schritt für Schritt interpretieren. Sie entwickeln Ihr Verständnis davon weiter, wie in R Grafiken genutzt und angepasst werden, um statistische Inhalte zu visualisieren. Sie nutzen R um im gegebenen Beispiel über Konzepte der Inferenzstatistik (wie den Standardfehler) nachzudenken. 6.2 Aufgaben WP06 Öffnen Sie die Datei “standardfehler.R” in RStudio (auf OLAT verfügbar). Gehen Sie den Code Zeile für Zeile durch und versuchen Sie im Detail (!) zu verstehen, was hier vor sich geht. Halten Sie Ihre Einsichten als Kommentare fest. Auch allfällige Fragen und Unklarheiten können Sie einfach als Kommentare notieren. Fügen Sie anschliessend die von Ihnen gesammelten Fragen und die dazugehörigen Codezeilen in ein Markdown-Dokument ein. Die Codezeilen sollen als R Chunk im Markdown aufgeführt sein, aber mit der Ergänzung ‘eval = FALSE’ versehen. Im Fliesstext des Markdowns können Sie Ihre Frage erläutern. Führen Sie den Code Schritt für Schritt aus. Konzentrieren Sie sich dann auf den letzten Punkt (“# Gemeinsame Darstellung …”). Was hat dieser Code mit dem Konzept des Standardfehlers / des Stichprobenfehlers zu tun? Spielen Sie ein wenig mit den verschiedenen Parametern - welche Zusammenhänge, die für den Standardfehler wesentlich sind, lassen sich erkennen? Sammeln Sie Punkte, die Ihnen aus den bisherigen Seminareinheiten unklar geblieben sind. Welche Aspekte würden Sie gerne noch einmal wiederholen/erläutert bekommen? Sammeln Sie diese Aspekte ebenfalls im Markdown auf dieselbe Art und Weise wie bei Aufgabe 2. Generieren Sie ein PDF aus dem Markdown, in welchem Sie allfällige Fragen sowie Unklarheiten und die dazugehörigen Codechunks aus Aufgabe 2 und 4 gesammelt haben. Beschriften Sie Ihr Dokument mit Fallloesung06_NameVorname.pdf und geben das Dokument via OLAT bis Mittwochmittag ab (28.10.2020, 12:00). "],
["references.html", "References", " References "]
]
